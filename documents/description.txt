SharpKinoko v2.0
================


1) Description
--------------

	Kinoko takes a method, runs it multiple times, measures the time intervals and displays an average.


2) How to use - Short description
---------------------------------

	There are two ways in which you can specify the methods you want to be measured:
		a) at compile time - mark the methods with KinokoTask attribute
		b) at run time - pass the name of the methods as command line parameter to the console.
	In both cases you can only test public methods that have no parameters, return no value and exists in a public static class or a class with parameterless constructor.


3) How to use - Detailed description
------------------------------------

	a: Specify methods at compile time - Using KinokoTask attribute
	---------------------------------------------------------------

	Step 1
	Create a method and add [KinokoTask] attribute on it.

	The methods that can be tested can be static or not, but should fulfill these requirements:
	Instance methods:
		- should be contained in a public class that has a public parameterless constructor;
		- should be public;
		- should have no parameters;
		- should have no return type.

	Static methods:
		- should be contained in a public class
		- should be public.
		- should have no parameters;
		- should have no return type.


	Step 2
	Load the assembly using KinokoConsole. It will perform the measurements on all the marked methods and will display the results.
		KinokoConsole.exe -a "assembly_file_name_1;assembly_file_name_2"


	b: Specify methods at run time - Without KinokoTask attribute
	-------------------------------------------------------------

	A method can be measured even if is not marked with the [KinokoTask] attribute. To do so, you need to specify the method name as parameter to the KinokoConsole app.
		KinokoConsole.exe -a "assembly_file_name_1;assembly_file_name_2" -s "namespace.classname.methodname1;namespace.classname.methodname2"

	This method is usefull if you are not allowed to change the code of the assembly you want to measure.


4) SharpKinokoConsole
---------------------

	KinokoConsole.exe <Options>
	
	Options
		-a --assemblies <assemblyFileName[;assemblyFileName[...]]>
			Specifies the name of the assembly file to be loaded.
			Multiple files can be specified separated by ';'
		
		-s --subjects <methodName[;methodName[...]]>
			Specifies the full name of the method (including the class name and the namespace) to be measured.
			Multiple methods can be specified separated by ';'

		
		
		
		
		
		
Kinoko specifications 
---------------------

I) From user's perspective
--------------------------

- kinoko should provide a console interface
- the user should be able to supply multiple assemblies (-a <fileName1;fileName2;...>)
- the user should be able to specifiy multiple subject methods (-s <methodName1;methodName2;...>)
- the user should be able to run all the valid methods from an assembly.
- the user should be able to run all the marked methods from an assembly.

II) From developer's perspective
--------------------------------

Console
- parse console atributes.
- display the progress and the result of a task.
- display help.


Framework
- implement Run method.
- create KinokoTask class. - contains the delegate and the category name.
- create KinokoResult class. - contains the list of measurements and the calculated values (average until now.)
- raise TaskRunning and TaskRun events.
- raise Measuring and Measured events.

- implement provider that loads all the valid methods from a list of assemblies.
- implement provider that loads all the marked methods from a list of assemblies.
- implement provider that loads the specified methods from a list of assemblies.
